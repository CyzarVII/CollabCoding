// This is the basic Server for Node.js Setup
// const express = require('express');
// const app = express();
// const port = 3000;
// app.get('/', (req, res) => {
//   res.send('Hello, World!');
// });
// app.listen(port, () => {
//   console.log(`Server is running at http://localhost:${port}`);
// });
// app.get('/api/data', (req, res) => {
//     const data = {
//         message: 'Hello from the API Side',
//         date: new Date(),
//     };
//     res.json(data);
// });
// ^^ This is the Basic Server using Express



// CRUD Operations 
// This is using the MongoDB client with a GUI connected via localhost with port 27017 (default)
// Here is the syntax for requiring mongodb after instaling the driver using npm install mongodb
// const {MongoClient} = require('mongodb');

// // This is the connection URL to connect to the server
// const url = 'mongodb://localhost:27017'
// const client = new MongoClient(url);

// // This is for the database name that will be utilized to connect the Ticket system
// const dbName = 'TicketSystemBE';

// async function main (){
//   // this is the method to be used to connect to the server
//   await client.connect();
//   console.log('Connected successfully to server');
//   const db = client.db(dbName);

//   // This performs the operations (create a collection)
//   const collection = db.collection('documents');

//   // Inserting of documents
// const insertResult = await collection.insertMany([{ a: 1}, {a: 2}, {a: 3}]);
// console.log('Inserted documents =>', insertResult);

// // Finding the documents
// const findResult = await collection.find({}).toArray();
// console.log('Found documents =>', findResult);

// // this wil now close the connection
// await client.close();
// }

// main().catch(console.error);


// CRUD OPERATIONS 

const { MongoClient, deserialize } = require('mongodb');

// This is the connection URL to connect to the server
const url = 'mongodb://localhost:27017'
const client = new MongoClient(url);

// This is for the database name that will be utilized to connect the Ticket system
const dbName = 'TicketSystemBE';

async function main() {
  // this is the method to be used to connect to the server
  await client.connect();
  console.log('Connected successfully to server');
  const db = client.db(dbName);

  // Collection Schema 
  const collectionName = 'documents';
  const schema = {
    validator: {
      $jsonSchema: {
        bsonType: 'object',
        required: ['user_name', 'password', 'user_id', 'FName', 'LName', 'DOB', 'Address', 'TRN'],
        properties: {

          id: {
            type: 'int',
            description: 'must be an integer and is required. It is auto generated by the system',

          },
          user_name: {
            type: 'string',
            description: 'must be a string to allow information to be placed in',
            minimum: 18,
            maximum: 100,

          },
          password: {
            bsonType: 'string',
            description: 'password must be a string',
          },
          Offenders_address: {
            bsonType: 'object',
            required: ['street', 'city', 'zipcode'],
            properties: {
              street: {
                bsonType: 'string',
                description: 'must be a string and is required',
              },
              city: {
                bsonType: 'string',
                description: 'must be a string and is required',
              },
              zipcode: {
                bsonType: 'string',
                pattern: '^[0-9]{5}$',
                description: 'must be a 5-digit string and is required',
              }
            }
          }, Offenders_driver_license: {
            bsonType: 'string',
            minimum: 18,
            maximum: 100,
            description: 'client must enter the offenders driver license information',

          }, offenders_vehicle_plate: {
            bsonType: 'string',
            minimum: 7,
            maximum: 9,
            description: 'client must enter the offenders vehicle plate information',

          }, date_of_offense: {
            bsonType: 'date',
            description: 'client must enter the date of the incident',

          }, payment_due_date: {
            bsonType: 'date',
            description: 'client must enter the payment details',

          }, traffic_court_date: {
            bsonType: 'date',
            description: 'client must enter traffic court date in the event client does not pay',

          }, offense_code: {
            bsonType: 'int',
            description: 'client must enter the offense code',

          }, offense_points: {
            bsonType: 'int',
            description: 'client must enter the offense points to identify how much the offender has to pay',

          }, offense_cost: {
            bsonType: 'int',
            description: 'client must enter the offense cost for damages',

          }, officer_name: {
            bsonType: 'string',
            description: 'enter the officer`s name',


          }, officer_badge_number: {
            bsonType: 'int',
            description: 'enter the officer`s badge number',

          }, officer_precint: {
            bsonType: 'string',
            description: 'enter the officer`s precint location',
          }

        }
      }
    },


  }


//   // This performs the operations (create a collection)
//   const collection = db.collection('documents');

//  // Create: Inserting a document
//  const createDocument = async (doc) => {
//   const result = await collection.insertOne(doc);
//   console.log(`Document inserted with _id: ${result.insertedId}`);
//  };

//  // Find all documents (Read Operation)
//  const readDocuments = async () => {
//   const docs = await collection.find({}).toArray();
//   console.log('Found documents =>', docs);
//  };


//  // Update the document 
//  const updateDocument = async (filter, update) => {
//   const result = await collection.updateOne(filter, {$set: update});
//   console.log(`Matched ${result.matchedCount} document(s) and modified ${result.modifiedCount} document(s)`);
// };

// // Delete: Remove a document
// const deleteDocument = async (filter) => {
//   const result = await collection.deleteOne(filter);
//   console.log(`Deleted ${result.deletedCount} document(s)`);
// };

// // Perform CRUD operations
// await createDocument({ name: 'Nick', age: 27 });
// await createDocument({ name: 'Dav', age: 35 });
// await readDocuments();
// await updateDocument({ name: 'Nick' }, { age: 56 });
// await readDocuments();
// await deleteDocument({ name: 'Dav' });
// await readDocuments();


// Create the collection with the schema
await db.createCollection(collectionName, schema);
    console.log(`Collection '${collectionName}' created with schema validation`);

    await client.close();
  }

  main().catch(console.error);